{"version":3,"file":"static/js/245.0bcf9fad.chunk.js","mappings":"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","sources":["components/input/Input.js","components/input/Input.styles.js","components/register/RegisterPage.styles.js","components/register/RegisterPage.js","components/sign-in/SignInPage.styles.js"],"sourcesContent":["import React, { forwardRef } from \"react\";\n\nimport { Container, InputField, Label, ChangeText } from \"./Input.styles\";\n\nconst Input = forwardRef(\n  ({ label, changeField, onChangeFieldClick, wrong, ...restProps }, ref) => {\n    return (\n      <Container>\n        {label ? <Label>{label}</Label> : null}\n        <InputField wrong={wrong} ref={ref} {...restProps} />\n        {changeField ? (\n          <ChangeText onClick={onChangeFieldClick}>{changeField}</ChangeText>\n        ) : null}\n      </Container>\n    );\n  }\n);\n\nexport default Input;\n","import styled, { css } from \"styled-components\";\n\nimport { darkColor, yellowColor } from \"../../utils/styles/styles\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 5px;\n`;\n\nexport const Label = styled.label`\n  color: ${darkColor};\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nexport const InputField = styled.input`\n  height: 35px;\n  width: 100%;\n  border: 1px solid ${yellowColor};\n  border-radius: 10px;\n  padding: 0 10px;\n  font-size: 12px;\n  outline: none;\n  ${({ wrong }) =>\n    wrong &&\n    css`\n      border: 1px solid #fa5729;\n    `}\n`;\n\nexport const ChangeText = styled.p`\n  font-size: 14px;\n  color: #334ccf;\n  cursor: pointer;\n`;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport const Image = styled.img`\n  width: 40%;\n`;\n","import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport {\n  LayoutContainer,\n  TextContainer,\n  HeaderText,\n  OutlinedButton,\n  DescriptionText,\n  PrimaryButton,\n  ErrorText,\n  Form,\n} from \"../../utils/styles/styles\";\n\nimport { InlineWrapper } from \"../sign-in/SignInPage.styles\";\n\nimport { selectScreen } from \"../../redux/reducers/ui/ui.selectors\";\n\nimport {\n  registerUser,\n  loginUserWithGoogle,\n  clearNextRoute,\n  clearError,\n} from \"../../redux/reducers/user/user.actions\";\n\nimport {\n  selectNextRoute,\n  selectUserAuthentication,\n  selectUserError,\n  selectIsUserPending,\n} from \"../../redux/reducers/user/user.selectors\";\n\nimport { Container, Image } from \"./RegisterPage.styles\";\n\nimport Waiting from \"../../images/full.png\";\n\nimport Anchor from \"../nav-achor/Anchor\";\nimport Input from \"../input/Input\";\nimport { isMobileSize } from \"../../utils/ui\";\n\nfunction Register() {\n  const navigate = useNavigate();\n  const screen = useSelector(selectScreen);\n  const authentication = useSelector(selectUserAuthentication);\n  const nextRoute = useSelector(selectNextRoute);\n  const userError = useSelector(selectUserError);\n  const pending = useSelector(selectIsUserPending);\n  const {\n    setValue,\n    register,\n    formState: { errors },\n    handleSubmit,\n    getValues,\n    watch,\n  } = useForm();\n  const dispatch = useDispatch();\n\n  const handleRegister = (e) => {\n    const formValues = getValues();\n    dispatch(registerUser(formValues));\n  };\n\n  useEffect(() => {\n    return () => {\n      dispatch(clearError());\n    };\n  }, []);\n\n  useEffect(() => {\n    if (authentication) {\n      setTimeout(() => {\n        const url = nextRoute ? `/${nextRoute}` : \"/\";\n        dispatch(clearNextRoute());\n        navigate(url);\n      }, 500);\n    }\n  }, [authentication]);\n\n  return (\n    <LayoutContainer>\n      <Container>\n        <InlineWrapper>\n          <TextContainer placeGap={\"10px\"} justify='center'>\n            <HeaderText>Welcome Back!</HeaderText>\n            <OutlinedButton onClick={() => dispatch(loginUserWithGoogle())}>\n              Sign up with Google\n            </OutlinedButton>\n            <DescriptionText style={{ margin: \"0 auto\" }}>or</DescriptionText>\n            <ErrorText>{userError}</ErrorText>\n            <Form screen={screen} onSubmit={handleSubmit(handleRegister)}>\n              <Input\n                type='text'\n                label='Full name'\n                name='fullName'\n                placeholder='Enter your full name'\n                onChange={(e) => setValue(\"fullName\", e.target.value)}\n                {...register(\"fullName\", {\n                  required: \"Full name is required\",\n                })}\n              />\n              <ErrorText>{errors.fullName?.message}</ErrorText>\n              <Input\n                type='email'\n                label='Email'\n                placeholder='Enter your email'\n                onChange={(e) => setValue(\"email\", e.target.value)}\n                {...register(\"email\", {\n                  required: \"Email is required\",\n                  pattern: {\n                    value: \"//^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+$//i\",\n                    message: \"Invalid Email address\",\n                  },\n                })}\n              />\n              <ErrorText>{errors.email?.message}</ErrorText>\n              <Input\n                type='password'\n                label='Password'\n                placeholder='Enter your password'\n                onChange={(e) => setValue(\"password\", e.target.value)}\n                {...register(\"password\", {\n                  required: \"Password is required\",\n                  minLength: {\n                    value: 8,\n                    message: \"Password should contain at least 8 characters\",\n                  },\n                })}\n              />\n              <ErrorText>{errors.password?.message}</ErrorText>\n              <Input\n                type='password'\n                label='Repeat password'\n                placeholder='Repeat password'\n                onChange={(e) => setValue(\"repeatPassword\", e.target.value)}\n                {...register(\"repeatPassword\", {\n                  required: \"Repeat password is required\",\n                  minLength: {\n                    value: 8,\n                    message:\n                      \"Repeat password should contain at least 8 characters\",\n                  },\n                  validate: (val) => {\n                    if (watch(\"password\") !== val) {\n                      return \"Your passwords do not match\";\n                    }\n                  },\n                })}\n              />\n              <ErrorText>{errors.repeatPassword?.message}</ErrorText>\n              <PrimaryButton disabled={pending} type='submit'>\n                Register\n              </PrimaryButton>\n            </Form>\n\n            <DescriptionText>\n              Not the first time? <Anchor href='/sign-in'>Sign in</Anchor>\n            </DescriptionText>\n          </TextContainer>\n          {!isMobileSize(screen, \"lg\") ? <Image src={Waiting} /> : null}\n        </InlineWrapper>\n      </Container>\n    </LayoutContainer>\n  );\n}\n\nexport default Register;\n","import styled from \"styled-components\";\nimport { InlineWrapper as Wrapper } from \"../../utils/styles/styles\";\n\nexport const Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport const InlineWrapper = styled(Wrapper)`\n  gap: 40px;\n  justify-content: center;\n`;\n\nexport const Image = styled.img`\n  width: 40%;\n`;\n"],"names":["Input","forwardRef","_ref","ref","label","changeField","onChangeFieldClick","wrong","restProps","_objectWithoutProperties","_excluded","_jsxs","Container","children","_jsx","Label","InputField","_objectSpread","ChangeText","onClick","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","darkColor","input","_templateObject3","yellowColor","css","_templateObject4","p","_templateObject5","Image","img","_errors$fullName","_errors$email","_errors$password","_errors$repeatPasswor","navigate","useNavigate","screen","useSelector","selectScreen","authentication","selectUserAuthentication","nextRoute","selectNextRoute","userError","selectUserError","pending","selectIsUserPending","_useForm","useForm","setValue","register","errors","formState","handleSubmit","getValues","watch","dispatch","useDispatch","useEffect","clearError","setTimeout","url","concat","clearNextRoute","LayoutContainer","InlineWrapper","TextContainer","placeGap","justify","HeaderText","OutlinedButton","loginUserWithGoogle","DescriptionText","style","margin","ErrorText","Form","onSubmit","e","formValues","registerUser","type","name","placeholder","onChange","target","value","required","fullName","message","pattern","email","minLength","password","validate","val","repeatPassword","PrimaryButton","disabled","Anchor","href","isMobileSize","src","Waiting","Wrapper"],"sourceRoot":""}